<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, January 26, 2021, 1:50 PM -->
<!-- MuClient version 5.06 -->

<!-- Plugin "XP_Gained" generated by Plugin Wizard -->

<muclient>

<plugin
  name="XP_Gained"
  author="Clafoutis"
  id="3dcf76309e217334472544ce"
  language="Lua"
  purpose="track xp differentials"
  date_written="2021-01-26 13:49:15"
  requires="5.06"
  version="1.0"
  >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Variables  -->

<variables>
  <variable name="xpOld">-1</variable>
  <variable name="xpDiff">0</variable>
  <variable name="xpHourRoutine">0</variable>
  <variable name="xpAccum">0</variable>
</variables>

<!--  Triggers  -->

<triggers>
  
  <trigger
    keep_evaluating="y"
    match="Reconnected\."
    regexp="y"
    repeat="y"
    send_to="12"
    sequence="100"
    >
    <send>
      SetVariable("xpOld", -1)
    </send>
  </trigger>

  <trigger
    keep_evaluating="y"
    match="You hyperspace into SWmud\."
    regexp="y"
    repeat="y"
    send_to="12"
    sequence="100"
    >
    <send>
      SetVariable("xpOld", -1)
    </send>
  </trigger>
  
  <trigger
    enabled="y"
    keep_evaluating="y"
    match="^\d+/\d+ (\-\d+|\d+) (\d+) \d+ .* &gt;"
    regexp="y"
    repeat="y"
    send_to="12"
    sequence="100"
    >
    <send>
      local xpCurrent = %2
      local xpOld = tonumber(GetVariable("xpOld"))
      local xpDiff = xpCurrent - xpOld
      local xpHourRoutine = tonumber(GetVariable("xpHourRoutine"))
      local xpAccum = tonumber(GetVariable("xpAccum"))
      local t = GetWorld ("xpHour")  -- get "xpHour" world

      if xpDiff ~= 0 then
        if xpOld == -1 then
	        Note ('initializing xp')
	      else
	        ColourNote (
            "gray", "black", "You have gained xp: ",
            "cornflowerblue", "black", xpDiff)
          SetStatus ("You have gained xp: ", xpDiff)

	        if xpHourRoutine ~= 0 then
	          xpAccum = xpAccum + xpDiff
	          SetVariable("xpAccum", xpAccum)
	   
	          t:DeleteOutput()
            t:ColourNote (
              "gray", "black", "You have gained xp: ",
              "cornflowerblue", "black", xpDiff)
            t:ColourNote (
              "#C0C0C0", "black", "Accumulated xp: ",
              "cyan", "black", xpAccum)
            DisplayTimeRemaining ()
	        end	

	      end
        
        SetVariable("xpOld", xpCurrent)
        SetVariable("xpDiff", xpDiff)	
      end
   
    </send>
  </trigger>
  
  <trigger
    enabled="y"
    keep_evaluating="y"
    match="^\d+/\d+ (\-\d+|\d+)/(\-\d+|\d+) (\d+) \d+ .* &gt;"
    regexp="y"
    repeat="y"
    send_to="12"
    sequence="100"
    >
    <send>
      local xpCurrent = %3
      local xpOld = tonumber(GetVariable("xpOld"))
      local xpDiff = xpCurrent - xpOld
   
      if xpDiff ~= 0 then
        if xpOld == -1 then
	        Note ('initializing xp')
	      else
	        Note ('You have gained xp: ' .. xpDiff)
          SetStatus ("You have gained xp: ", xpDiff)
	      end

        SetVariable("xpOld", xpCurrent)	 
      end
   
    </send>
  </trigger>
   
</triggers>

<!--  Aliases  -->

<aliases>

  <alias
    enabled="y"
    group="xpHour"
    match="xpstart"
    regexp="y"
    send_to="12"
    sequence="100"
    >
    <send>
      local xpOld = tonumber(GetVariable("xpOld"))

      if xpOld ~= -1 then
        local t = GetWorld ("xpHour")  -- get "xpHour" world
        
        SetVariable ("xpDiff", 0)
        SetVariable ("xpHourRoutine", 1)
        SetVariable ("xpAccum", 0)
        EnableTimer ("xpHour_Timer", true)
        ResetTimer("xpHour_Timer")
        EnableTimer ("xpHour_Display", true)
        ResetTimer("xpHour_Display")
        Note ('XP Hour Timer on')

        local xpDiff = tonumber(GetVariable("xpDiff"))
        local xpAccum = tonumber(GetVariable("xpAccum"))
   
        xpHourOpened = world.Open ("worlds\\\\xpHour.MCL")
   	      if xpHourOpened == true then 
	          t:DeleteOutput()
	          t:ColourNote (
              "gray", "black", "You have gained xp: ",
              "cornflowerblue", "black", xpDiff)
	          t:ColourNote (
              "#C0C0C0", "black", "Accumulated xp: ",
              "cyan", "black", xpAccum)
            DisplayTimeRemaining ()  
	        else
	          Note ("XP Tracking Window Did Not Load")
	        end
	
        SWmudOpened = world.Open ("worlds\\\\SWmud.MCL") -- puts focus back on main window
      else
        Note ('Initialize xp first: Get mud to output a standard prompt')
      end  

    </send>
  </alias>

  <alias
    enabled="y"
    group="xpHour"
    match="xpstop"
    regexp="y"
    send_to="12"
    sequence="100"
    >
    <send>
      local t = GetWorld ("xpHour")  -- get "xpHour" world
      local xpDiff = tonumber(GetVariable("xpDiff"))
      local xpAccum = tonumber(GetVariable("xpAccum"))

      t:DeleteOutput()
      t:ColourNote (
        "gray", "black", "You have gained xp: ",
        "cornflowerblue", "black", xpDiff)
      t:ColourNote (
        "#C0C0C0", "black", "Accumulated xp: ",
        "cyan", "black", xpAccum)
      t:Note ('Timer Aborted')  

      SetVariable ("xpHourRoutine", 0)
      EnableTimer ("xpHour_Timer", false)
      EnableTimer ("xpHour_Display", false)
      Note ('XP Hour Timer off')
	
    </send>
  </alias>

  <alias
    enabled="y"
    group="xpHour"
    match="xpstatus"
    regexp="y"
    send_to="12"
    sequence="100"
    >
    <send>
      local t = GetWorld ("xpHour")  -- get "xpHour" world
      local xpDiff = tonumber(GetVariable("xpDiff"))
      local xpHourRoutine = tonumber(GetVariable("xpHourRoutine"))
      local xpAccum = tonumber(GetVariable("xpAccum"))

      if xpHourRoutine == 0 then
        t:DeleteOutput()
        t:ColourNote (
          "gray", "black", "You have gained xp: ",
          "cornflowerblue", "black", xpDiff)
        t:ColourNote (
          "#C0C0C0", "black", "Accumulated xp: ",
          "cyan", "black", xpAccum)
        t:Note ('Timer Off')  
      else
        t:DeleteOutput()
        t:ColourNote (
          "gray", "black", "You have gained xp: ",
          "cornflowerblue", "black", xpDiff)
        t:ColourNote (
          "#C0C0C0", "black", "Accumulated xp: ",
          "cyan", "black", xpAccum)
        DisplayTimeRemaining ()
      end

    </send>
  </alias>

</aliases>

<!-- timers -->

<timers>

  <timer
    name="xpHour_Timer"
    enabled="n"
    hour="1"
    second="0.00"
    offset_second="0.00"
    send_to="12"
    >
    <send>
      local t = GetWorld ("xpHour")  -- get "xpHour" world
      local xpDiff = tonumber(GetVariable("xpDiff"))
      local xpAccum = tonumber(GetVariable("xpAccum"))

      EnableTimer ("xpHour_Display", false)

      t:DeleteOutput()
      t:ColourNote (
        "gray", "black", "You have gained xp: ",
        "cornflowerblue", "black", xpDiff)
      t:ColourNote (
        "#C0C0C0", "black", "Accumulated xp: ",
        "cyan", "black", xpAccum)
      t:Note ('Hour Elapsed: Timer Off')

      SetVariable ("xpHourRoutine", 0)
      EnableTimer ("xpHour_Timer", false)
      Note ('XP Hour Timer off')

    </send>
  </timer>

  <timer
    name="xpHour_Display"
    enabled="n"
    second="1.00"
    offset_second="0.00"
    send_to="12"
    >
    <send>
      local t = GetWorld ("xpHour")  -- get "xpHour" world
      local xpDiff = tonumber(GetVariable("xpDiff"))
      local xpAccum = tonumber(GetVariable("xpAccum"))

      t:DeleteOutput()
      t:ColourNote (
        "gray", "black", "You have gained xp: ",
        "cornflowerblue", "black", xpDiff)
      t:ColourNote (
        "#C0C0C0", "black", "Accumulated xp: ",
        "cyan", "black", xpAccum)
      DisplayTimeRemaining ()

    </send>
  </timer>

</timers>

<!--  Script  -->

<script>

  <![CDATA[

    function OnPluginInstall (s)
      
      SetVariable("xpOld", -1)
      SetVariable("xpDiff", 0)
      SetVariable("xpHourRoutine", 0)
      SetVariable("xpAccum", 0)

      xpHourOpened = world.Open ("worlds\\\\xpHour.MCL")
      SWmudOpened = world.Open ("worlds\\\\SWmud.MCL") -- puts focus back on main window

      local t = GetWorld ("xpHour")  -- get "xpHour" world

      if xpHourOpened == true then
        t:DeleteOutput()
        t:Note ('XP_Gained Plugin installed')
      else
	      Note ("XP Tracking Window Did Not Load")
	    end

    end -- function OnPluginInstall

    function DisplayTimeRemaining ()
    
      local t = GetWorld ("xpHour")  -- get "xpHour" world
      local xpHourRoutine = tonumber(GetVariable("xpHourRoutine"))
      local secRemain = GetTimerInfo ("xpHour_Timer", 13)

      secRemain = math.floor(secRemain + 0.5)
      min = math.floor(secRemain / 60)
      sec = secRemain - (min * 60)

      if sec < 10 then
        sec = "0" .. sec
      end

      if min < 10 then
        min = " " .. min
      end

      t:ColourNote(
        "gray", "black", "Time Remaining: ",
        "cornflowerblue", "black", min,
        "cornflowerblue", "black", ":",
        "cornflowerblue", "black", sec)

    end -- function DisplayTimeRemaining

  ]]>

</script>

</muclient>
